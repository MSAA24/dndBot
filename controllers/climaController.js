const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
const { DynamoDBDocumentClient, GetCommand, PutCommand } = require("@aws-sdk/lib-dynamodb");

// Crear cliente de DynamoDB
const client = new DynamoDBClient({ region: "us-east-2" });
const dynamoDB = DynamoDBDocumentClient.from(client);


const climas = [
    "Cielo despejado y brisa suave.",
    "D칤a soleado con algunas nubes dispersas.",
    "Amanecer fresco, pero el sol calienta r치pidamente.",
    "Calor moderado, con el viento refrescando el ambiente.",
    "Un d칤a seco con el cielo azul intenso.",
    "Sol radiante, pero con una ligera neblina matinal.",
    "Temperatura templada con vientos ligeros.",
    "Cielo completamente despejado; ni una nube a la vista.",
    "D칤a c치lido con un aire seco y envolvente.",
    "Ambiente soleado con nubes algodonosas en el horizonte.",

    "Cielo cubierto con una luz gris치cea difusa.",
    "Nubes densas, pero sin se침ales de lluvia.",
    "Un d칤a nublado y algo pesado, sin viento.",
    "Amanecer oscuro con el sol luchando por asomarse.",
    "D칤a gris con brisa fresca.",
    "Cielo encapotado con r치fagas de viento intermitentes.",
    "Sensaci칩n de humedad en el aire, aunque sin lluvia.",
    "Niebla baja cubriendo el suelo por la ma침ana.",
    "Un cielo plomizo que da una sensaci칩n de pesadez.",
    "Atardecer te침ido de naranja tras un d칤a mayormente nublado.",

    "Llovizna ligera durante gran parte del d칤a.",
    "Chubascos intermitentes con momentos de calma.",
    "Lluvia constante que humedece todo el paisaje.",
    "Nubes oscuras en el horizonte, anunciando tormenta.",
    "Trueno distante, pero sin lluvia por ahora.",
    "Lluvia suave acompa침ada de viento fresco.",
    "Tormenta el칠ctrica en la lejan칤a, iluminando el cielo.",
    "Un chaparr칩n inesperado que dura apenas unos minutos.",
    "Bruma h칰meda despu칠s de una madrugada lluviosa.",
    "D칤a lluvioso con peque침os charcos por todas partes.",

    "Ma침ana g칠lida con escarcha cubriendo el suelo.",
    "Nieve ligera que cae sin acumularse demasiado.",
    "Nubes gruesas y aire helado, pero sin nieve.",
    "Viento cortante que hace dif칤cil mantenerse caliente.",
    "D칤a fr칤o, pero con sol brillante sobre la nieve.",
    "Un frente de aire fr칤o que desciende repentinamente.",
    "Copos de nieve espor치dicos flotando en el aire.",
    "Amanecer helado con cristales de hielo en las hojas.",
    "Una ventisca en la noche dej칩 el terreno cubierto de blanco.",
    "Cielo despejado, pero el fr칤o es intenso.",

    "Vientos fuertes que levantan polvo y hojas secas.",
    "Brisa err치tica, a veces suave y otras con r치fagas intensas.",
    "Un aire c치lido que se vuelve m치s fr칤o al anochecer.",
    "Cambio repentino en la temperatura con r치fagas de viento.",
    "Sensaci칩n de inestabilidad en el clima; podr칤a cambiar en cualquier momento.",
    "Niebla densa que se disipa con el viento.",
    "R치fagas de viento ululan entre los 치rboles, sin lluvia.",
    "Brisa marina refrescante con olor a salitre.",
    "Un d칤a con vientos persistentes que empujan las nubes.",
    "Tormenta de arena leve en regiones 치ridas, reduciendo la visibilidad."   
];


async function generarYGuardarClima() {
    try {
        // Consultar si ya existe un clima guardado
        const climaGuardado = await obtenerClimaGlobal();
        
        // Random de 1 a 50
        const numeroAleatorio = Math.floor(Math.random() * 50) + 1;

        // Asignar el clima basado en el n칰mero aleatorio
        const climaSeleccionado = climas[numeroAleatorio - 1];

        // Guardar el clima en la base de datos
        await guardarClimaGlobal(climaSeleccionado);

        return climaSeleccionado;
    } catch (error) {
        console.error('Error al generar o guardar el clima global:', error);
    }
}

// Obtener el clima global desde BD
async function obtenerClimaGlobal() {
    const params = {
        TableName: 'clima',  
        Key: { climaID: 'global' } // Usamos un ID 칰nico para el clima global
    };
    
    try {
        const result = await dynamoDB.send(new GetCommand(params));
        if (result.Item) {
            return result.Item; // Devuelve el clima guardado
        } else {
            console.log('No se encontr칩 clima guardado.');
            return null;
        }
    } catch (error) {
        console.error('Error al obtener el clima global:', error);
        return null;
    }
}

// Guardar el clima global en la base de datos
async function guardarClimaGlobal(clima) {
    const params = {
        TableName: 'clima',
        Item: {
            climaID: 'global', // ID 칰nico para el clima global
            clima: clima
        }
    };

    try {
        await dynamoDB.send(new PutCommand(params));
        console.log('Clima global guardado:', clima);
    } catch (error) {
        console.error('Error al guardar el clima global:', error);
    }
}

module.exports = [
    // Comando /clima
    {
        data: new SlashCommandBuilder()
            .setName('clima')
            .setDescription('Obtiene el clima actual global'),

        async execute(interaction) {
            try {
                const clima = await obtenerClimaGlobal();
                if (clima) {
                    const embed = new EmbedBuilder()
                        .setTitle("游깴 Clima Actual")
                        .setDescription(`El clima actual es: **${clima.clima}**`)
                        .setColor('#1E90FF') // Color
                        .setTimestamp();

                    await interaction.reply({ embeds: [embed] });
                } else {
                    await interaction.reply("No se ha guardado un clima global a칰n.");
                }
            } catch (error) {
                console.error("Error al mostrar el clima:", error);
                await interaction.reply("Hubo un error al obtener el clima.");
            }
        },
    },

    // Comando /cambiarClima
    {
        data: new SlashCommandBuilder()
            .setName('cambiarclima')
            .setDescription('Cambia el clima global'),

        async execute(interaction) {
            try {
                const clima = await generarYGuardarClima();
                await interaction.reply(`Se cambi칩 el clima a: ${clima}`);
            } catch (error) {
                console.error("Error al cambiar el clima:", error);
                await interaction.reply("Hubo un error al cambiar el clima.");
            }
        },
    },

    // Comando /climaSimple
    {
        data: new SlashCommandBuilder()
            .setName('climasimple')
            .setDescription('Obtiene el clima de forma sencilla'),

        async execute(interaction) {
            try {
                const clima = await obtenerClimaGlobal();
                if (clima) {
                    await interaction.reply(`El clima es: ${clima.clima}`);
                } else {
                    await interaction.reply("No se ha guardado un clima a칰n.");
                }
            } catch (error) {
                console.error("Error al mostrar el clima simple:", error);
                await interaction.reply("Hubo un error al obtener el clima.");
            }
        },
    },
];